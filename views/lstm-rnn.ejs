<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <title><%= title %></title>
        <link rel="stylesheet" type="text/css" href="/stylesheets/styles.css">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
        <!-- Loading mathjax macro -->
        <!-- Load mathjax -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML"></script>
        <!-- MathJax configuration -->
        <script type="text/x-mathjax-config" src="/javascript/script.js"></script>
        <!-- End of mathjax configuration -->
      </head>
<body>
  <div tabindex="-1" id="notebook" class="border-box-sizing">
    <div class="container" id="notebook-container">

<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="A-test-LSTM-RNN-network">A test LSTM RNN network<a class="anchor-link" href="#A-test-LSTM-RNN-network">&#182;</a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[2]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">copy</span><span class="o">,</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[3]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># sigmoid nonlinearity</span>
<span class="k">def</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="n">output</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">output</span>

<span class="c1"># convert output of sigmoid function to its derivative</span>
<span class="k">def</span> <span class="nf">sigmoid_output_to_derivative</span><span class="p">(</span><span class="n">output</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">output</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">output</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[4]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># training dataset generation</span>
<span class="n">int2binary</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">binary_dim</span> <span class="o">=</span> <span class="mi">8</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">largest_number</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">binary_dim</span><span class="p">)</span>
<span class="n">binary</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unpackbits</span><span class="p">(</span>
    <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="nb">range</span><span class="p">(</span><span class="n">largest_number</span><span class="p">)],</span><span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">uint8</span><span class="p">)</span><span class="o">.</span><span class="n">T</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">largest_number</span><span class="p">):</span>
    <span class="n">int2binary</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">binary</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[6]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># input variables</span>
<span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span>
<span class="n">input_dim</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">hidden_dim</span> <span class="o">=</span> <span class="mi">16</span>
<span class="n">output_dim</span> <span class="o">=</span> <span class="mi">1</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[7]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># initialize neural network weights</span>
<span class="n">synapse_0</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="n">input_dim</span><span class="p">,</span><span class="n">hidden_dim</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span>
<span class="n">synapse_1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="n">hidden_dim</span><span class="p">,</span><span class="n">output_dim</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span>
<span class="n">synapse_h</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="n">hidden_dim</span><span class="p">,</span><span class="n">hidden_dim</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span>

<span class="n">synapse_0_update</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">synapse_0</span><span class="p">)</span>
<span class="n">synapse_1_update</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">synapse_1</span><span class="p">)</span>
<span class="n">synapse_h_update</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">synapse_h</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[8]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># training logic</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20000</span><span class="p">):</span>
    
    <span class="c1"># generate a simple addition problem (a + b = c)</span>
    <span class="n">a_int</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">largest_number</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># int version</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">int2binary</span><span class="p">[</span><span class="n">a_int</span><span class="p">]</span> <span class="c1"># binary encoding</span>

    <span class="n">b_int</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">largest_number</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># int version</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">int2binary</span><span class="p">[</span><span class="n">b_int</span><span class="p">]</span> <span class="c1"># binary encoding</span>

    <span class="c1"># true answer</span>
    <span class="n">c_int</span> <span class="o">=</span> <span class="n">a_int</span> <span class="o">+</span> <span class="n">b_int</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">int2binary</span><span class="p">[</span><span class="n">c_int</span><span class="p">]</span>
    
    <span class="c1"># where we&#39;ll store our best guess (binary encoded)</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>

    <span class="n">overallError</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="n">layer_2_deltas</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="n">layer_1_values</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="n">layer_1_values</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">hidden_dim</span><span class="p">))</span>
    
    <span class="c1"># moving along the positions in the binary encoding</span>
    <span class="k">for</span> <span class="n">position</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">binary_dim</span><span class="p">):</span>
        
        <span class="c1"># generate input and output</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="n">a</span><span class="p">[</span><span class="n">binary_dim</span> <span class="o">-</span> <span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span><span class="n">b</span><span class="p">[</span><span class="n">binary_dim</span> <span class="o">-</span> <span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]])</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="n">c</span><span class="p">[</span><span class="n">binary_dim</span> <span class="o">-</span> <span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]])</span><span class="o">.</span><span class="n">T</span>

        <span class="c1"># hidden layer (input ~+ prev_hidden)</span>
        <span class="n">layer_1</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">synapse_0</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">layer_1_values</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">synapse_h</span><span class="p">))</span>

        <span class="c1"># output layer (new binary representation)</span>
        <span class="n">layer_2</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">layer_1</span><span class="p">,</span><span class="n">synapse_1</span><span class="p">))</span>

        <span class="c1"># did we miss?... if so, by how much?</span>
        <span class="n">layer_2_error</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">layer_2</span>
        <span class="n">layer_2_deltas</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">layer_2_error</span><span class="p">)</span><span class="o">*</span><span class="n">sigmoid_output_to_derivative</span><span class="p">(</span><span class="n">layer_2</span><span class="p">))</span>
        <span class="n">overallError</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">layer_2_error</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    
        <span class="c1"># decode estimate so we can print it out</span>
        <span class="n">d</span><span class="p">[</span><span class="n">binary_dim</span> <span class="o">-</span> <span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">layer_2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
        
        <span class="c1"># store hidden layer so we can use it in the next timestep</span>
        <span class="n">layer_1_values</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">layer_1</span><span class="p">))</span>
    
    <span class="n">future_layer_1_delta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">hidden_dim</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">position</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">binary_dim</span><span class="p">):</span>
        
        <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="n">a</span><span class="p">[</span><span class="n">position</span><span class="p">],</span><span class="n">b</span><span class="p">[</span><span class="n">position</span><span class="p">]]])</span>
        <span class="n">layer_1</span> <span class="o">=</span> <span class="n">layer_1_values</span><span class="p">[</span><span class="o">-</span><span class="n">position</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">prev_layer_1</span> <span class="o">=</span> <span class="n">layer_1_values</span><span class="p">[</span><span class="o">-</span><span class="n">position</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
        
        <span class="c1"># error at output layer</span>
        <span class="n">layer_2_delta</span> <span class="o">=</span> <span class="n">layer_2_deltas</span><span class="p">[</span><span class="o">-</span><span class="n">position</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="c1"># error at hidden layer</span>
        <span class="n">layer_1_delta</span> <span class="o">=</span> <span class="p">(</span><span class="n">future_layer_1_delta</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">synapse_h</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="o">+</span> <span class="n">layer_2_delta</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">synapse_1</span><span class="o">.</span><span class="n">T</span><span class="p">))</span> <span class="o">*</span> <span class="n">sigmoid_output_to_derivative</span><span class="p">(</span><span class="n">layer_1</span><span class="p">)</span>

        <span class="c1"># let&#39;s update all our weights so we can try again</span>
        <span class="n">synapse_1_update</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">atleast_2d</span><span class="p">(</span><span class="n">layer_1</span><span class="p">)</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">layer_2_delta</span><span class="p">)</span>
        <span class="n">synapse_h_update</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">atleast_2d</span><span class="p">(</span><span class="n">prev_layer_1</span><span class="p">)</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">layer_1_delta</span><span class="p">)</span>
        <span class="n">synapse_0_update</span> <span class="o">+=</span> <span class="n">X</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">layer_1_delta</span><span class="p">)</span>
        
        <span class="n">future_layer_1_delta</span> <span class="o">=</span> <span class="n">layer_1_delta</span>
    

    <span class="n">synapse_0</span> <span class="o">+=</span> <span class="n">synapse_0_update</span> <span class="o">*</span> <span class="n">alpha</span>
    <span class="n">synapse_1</span> <span class="o">+=</span> <span class="n">synapse_1_update</span> <span class="o">*</span> <span class="n">alpha</span>
    <span class="n">synapse_h</span> <span class="o">+=</span> <span class="n">synapse_h_update</span> <span class="o">*</span> <span class="n">alpha</span>    

    <span class="n">synapse_0_update</span> <span class="o">*=</span> <span class="mi">0</span>
    <span class="n">synapse_1_update</span> <span class="o">*=</span> <span class="mi">0</span>
    <span class="n">synapse_h_update</span> <span class="o">*=</span> <span class="mi">0</span>
    
    <span class="c1"># print out progress</span>
    <span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
        <span class="nb">print</span> <span class="p">(</span><span class="s2">&quot;Epoch:&quot;</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">j</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">))</span>
        <span class="nb">print</span> <span class="p">(</span><span class="s2">&quot;Error:&quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">overallError</span><span class="p">))</span>
        <span class="nb">print</span> <span class="p">(</span><span class="s2">&quot;Pred:&quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>
        <span class="nb">print</span> <span class="p">(</span><span class="s2">&quot;True:&quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
        <span class="n">out</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">index</span><span class="p">,</span><span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">d</span><span class="p">)):</span>
            <span class="n">out</span> <span class="o">+=</span> <span class="n">x</span><span class="o">*</span><span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span>
        <span class="nb">print</span> <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">a_int</span><span class="p">),</span> <span class="s2">&quot; + &quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">b_int</span><span class="p">),</span> <span class="s2">&quot; = &quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">out</span><span class="p">))</span>
        <span class="nb">print</span> <span class="p">(</span><span class="s2">&quot;------------&quot;</span><span class="p">)</span>

        
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

<div class="prompt"></div>


<div class="output_subarea output_stream output_stdout output_text">
<pre>Epoch: 0
Error: [3.45638663]
Pred: [0 0 0 0 0 0 0 1]
True: [0 1 0 0 0 1 0 1]
9  +  60  =  1
------------
Epoch: 1
Error: [3.63389116]
Pred: [1 1 1 1 1 1 1 1]
True: [0 0 1 1 1 1 1 1]
28  +  35  =  255
------------
Epoch: 2
Error: [3.91366595]
Pred: [0 1 0 0 1 0 0 0]
True: [1 0 1 0 0 0 0 0]
116  +  44  =  72
------------
Epoch: 3
Error: [3.72191702]
Pred: [1 1 0 1 1 1 1 1]
True: [0 1 0 0 1 1 0 1]
4  +  73  =  223
------------
Epoch: 4
Error: [3.5852713]
Pred: [0 0 0 0 1 0 0 0]
True: [0 1 0 1 0 0 1 0]
71  +  11  =  8
------------
Epoch: 5
Error: [2.53352328]
Pred: [1 0 1 0 0 0 1 0]
True: [1 1 0 0 0 0 1 0]
81  +  113  =  162
------------
Epoch: 6
Error: [0.57691441]
Pred: [0 1 0 1 0 0 0 1]
True: [0 1 0 1 0 0 0 1]
81  +  0  =  81
------------
Epoch: 7
Error: [1.42589952]
Pred: [1 0 0 0 0 0 0 1]
True: [1 0 0 0 0 0 0 1]
4  +  125  =  129
------------
Epoch: 8
Error: [0.47477457]
Pred: [0 0 1 1 1 0 0 0]
True: [0 0 1 1 1 0 0 0]
39  +  17  =  56
------------
Epoch: 9
Error: [0.21595037]
Pred: [0 0 0 0 1 1 1 0]
True: [0 0 0 0 1 1 1 0]
11  +  3  =  14
------------
Epoch: 10
Error: [0.3231264]
Pred: [0 1 0 1 1 1 1 1]
True: [0 1 0 1 1 1 1 1]
18  +  77  =  95
------------
Epoch: 11
Error: [0.31291546]
Pred: [0 0 1 0 0 1 1 1]
True: [0 0 1 0 0 1 1 1]
14  +  25  =  39
------------
Epoch: 12
Error: [0.41985062]
Pred: [1 0 0 0 0 0 1 0]
True: [1 0 0 0 0 0 1 0]
83  +  47  =  130
------------
Epoch: 13
Error: [0.33870993]
Pred: [0 1 1 1 0 1 1 1]
True: [0 1 1 1 0 1 1 1]
73  +  46  =  119
------------
Epoch: 14
Error: [0.2248094]
Pred: [1 0 0 0 1 1 0 1]
True: [1 0 0 0 1 1 0 1]
41  +  100  =  141
------------
Epoch: 15
Error: [0.23466106]
Pred: [0 1 1 0 1 0 0 1]
True: [0 1 1 0 1 0 0 1]
35  +  70  =  105
------------
Epoch: 16
Error: [0.29697817]
Pred: [1 0 0 0 0 0 1 0]
True: [1 0 0 0 0 0 1 0]
21  +  109  =  130
------------
Epoch: 17
Error: [0.28425318]
Pred: [1 0 0 1 0 0 0 0]
True: [1 0 0 1 0 0 0 0]
70  +  74  =  144
------------
Epoch: 18
Error: [0.19182073]
Pred: [0 1 1 0 0 1 1 0]
True: [0 1 1 0 0 1 1 0]
59  +  43  =  102
------------
Epoch: 19
Error: [0.25523641]
Pred: [1 0 0 1 1 0 0 1]
True: [1 0 0 1 1 0 0 1]
110  +  43  =  153
------------
</pre>
</div>
</div>

</div>
</div>

</div>
    </div>
  </div>
</body>

 


</html>
